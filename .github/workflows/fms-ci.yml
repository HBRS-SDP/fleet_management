name: Fleet Management CI

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - travisIntegration

env:
  CONTAINER_TEST_IMAGE: docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test
  IMAGE_NAME: fms

jobs:
  build_fms:
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2

      - name: build docker fms image
        run: docker build -t $IMAGE_NAME .

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=test
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  build_osm_brsu:
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2

      - name: build docker osm image
        run: docker build -t hbrs-sdp/docker-overpass-api:latest https://github.com/ropod-project/docker-overpass-api.git#brsu

      - name: save osm image
        run: docker save -o osm_brsu.tar.gz hbrs-sdp/docker-overpass-api

      - name: upload osm image
        uses: actions/upload-artifact@v2
        with:
          name: osm_image
          path: osm_brsu.tar.gz

  build_com_mediator:
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2

      - name: build com_mediator image
        run: |
          git clone https://github.com/ropod-project/ropod_com_mediator.git
          cd ropod_com_mediator
          sed -i 's,git.ropod.org:4567/ropod/ropod_common:latest,ropod/ropod_common:latest,g' Dockerfile
          docker build -t ropod/ropod_com_mediator:latest .

      - name: save com_mediator image
        run: docker save -o com_mediator.tar.gz ropod/ropod_com_mediator

      - name: upload com_mediator image
        uses: actions/upload-artifact@v2
        with:
          name: com_mediator_image
          path: com_mediator.tar.gz

  docs:
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: "3.6"

      - name: install dependencies
        run: |
          sudo apt-get -y install make gcc
          pip install sphinx sphinx_rtd_theme

      - name: make docs
        run: |
          cd docs
          make html
          cp -rf _build/html docs/

      - name: store docs
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add docs/html/*
          git commit -m "push docs generated from ${{ github.sha }}"
          git push

  pylint:
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: "3.6"

      - name: install dependencies
        run: |
          pip install pylint
          pip install anybadge

      - name: run pylint
        run: |
          rm pylint.svg
          python3 .travis/lint.py

      - name: store pylint resuts
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add pylint.svg
          git commit -m "pylint results from ${{ github.sha }}"
          git push

  coverage:
    needs: [build_fms, build_osm_brsu]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: run coverage test
        run: docker run $CONTAINER_TEST_IMAGE pytest --collect-only --cov=fleet_management test/fms

  resource_management_test:
    needs: [build_fms, build_osm_brsu]

    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: run resource_management test
        run: |
          docker run $CONTAINER_TEST_IMAGE pytest test/fms/resources/fleet
          docker run $CONTAINER_TEST_IMAGE pytest test/fms/resources/infrastructure

  com_mediator_test:
    needs: [build_com_mediator, coverage, resource_management_test]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: download com_mediator image
        uses: actions/download-artifact@v2
        with:
          name: com_mediator_image

      - name: load com_mediator image
        run: docker load -i com_mediator.tar.gz

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run com_mediator test
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up --exit-code-from com_mediator_test com_mediator_test robot_proxy_1 robot_1 task_relay task_requester fms com_mediator
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  elevator_monitor:
    needs: [coverage, resource_management_test]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Log into registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: pull fms images
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: pull elevator images
        run: |
          docker pull ghcr.io/hbrs-sdp/ropod-elevator:simulator
          docker pull ghcr.io/hbrs-sdp/ropod-elevator:latest

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run elevator_monitor test
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up --exit-code-from elevator_monitor_test elevator_monitor_test elevator
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  elevator_workflow:
    needs: [coverage, resource_management_test]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Log into registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: pull fms images
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: pull elevator images
        run: |
          docker pull ghcr.io/hbrs-sdp/ropod-elevator:simulator
          docker pull ghcr.io/hbrs-sdp/ropod-elevator:latest

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run elevator_monitor test
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up -d elevator
          docker-compose -f .travis/docker-compose.yml up --exit-code-from elevator_test elevator_test fms
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  path_planner_requests:
    needs: [coverage, resource_management_test]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run path planner test
        run: |
          docker-compose -f .travis/docker-compose.yml up path_planner_test
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  query_interface:
    needs: [coverage, resource_management_test]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run path planner test
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up --exit-code-from query_interface_test query_interface_test
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  task_request_case_1:
    needs: [com_mediator_test, path_planner_requests, query_interface]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run task request case 1
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up --exit-code-from task_test_1 task_test_1 fms robot_proxy_1 robot_1
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  task_request_case_2:
    needs: [com_mediator_test, path_planner_requests, query_interface]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run task request case 2
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up --exit-code-from task_test_2 task_test_2 fms robot_proxy_1 robot_1
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  task_request_case_3:
    needs: [com_mediator_test, path_planner_requests, query_interface]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run task request case 3
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up --exit-code-from task_test_3 task_test_3 fms robot_proxy_1 robot_1
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  task_request_case_4:
    needs: [com_mediator_test, path_planner_requests, query_interface]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run task request case 4
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up --exit-code-from task_test_4 task_test_4 fms robot_proxy_1 robot_1
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  task_request_case_5:
    needs: [com_mediator_test, path_planner_requests, query_interface]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run task request case 5
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up --exit-code-from task_test_5 task_test_5 fms robot_proxy_1 robot_1
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  task_request_case_6:
    needs: [com_mediator_test, path_planner_requests, query_interface]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run task request case 6
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up --exit-code-from task_test_6 task_test_6 fms robot_proxy_1 robot_1
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  task_request_case_7:
    needs: [com_mediator_test, path_planner_requests, query_interface]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run task request case 7
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up --exit-code-from task_test_7 task_test_7 fms robot_proxy_1 robot_1
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  task_request_case_8:
    needs: [com_mediator_test, path_planner_requests, query_interface]

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: pull fms image
        run: docker pull docker.pkg.github.com/hbrs-sdp/fleet_management/fms:test

      - name: download osm image
        uses: actions/download-artifact@v2
        with:
          name: osm_image

      - name: load osm image
        run: docker load -i osm_brsu.tar.gz

      - name: run task request case 8
        run: |
          docker-compose up -d roscore
          docker-compose -f .travis/docker-compose.yml up --exit-code-from task_test_8 task_test_8 fms robot_proxy_1 robot_1
          docker-compose logs

      - name: stop docker images
        run: docker stop $(docker ps -aq)

  push_fms_image_to_github:
    needs:
      [
        task_request_case_1,
        task_request_case_2,
        task_request_case_3,
        task_request_case_4,
        task_request_case_5,
        task_request_case_6,
        task_request_case_7,
        task_request_case_8,
      ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build -t $IMAGE_NAME .
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

#          # Strip git ref prefix from version
#          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#          # Strip "v" prefix from tag name
#          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
#          # Use Docker `latest` tag convention
#          [ "$VERSION" == "master" ] && VERSION=latest
