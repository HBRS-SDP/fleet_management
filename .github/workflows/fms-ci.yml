name: Fleet Management CI

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - travisIntegration

env:
  $CONTAINER_TEST_IMAGE: hbrs-sdp/fms:$GITHUB_REF

jobs:
  build:
    runs-on: ubuntu-6.04
    steps:
      - uses: actions/checkout@v2

      - name: build docker fms and osm images
        run: |
          docker build -t $CONTAINER_TEST_IMAGE .
          docker build -t hbrs-sdp/docker-overpass-api:latest https://github.com/ropod-project/docker-overpass-api.git#brsu

      - name: save fms and osm images
        run: |
          docker save -o fms_testbuild.tar.gz $CONTAINER_TEST_IMAGE
          docker save -o osm_brsu.tar.gz hbrs-sdp/docker-overpass-api

      - name: upload fms and osm images
        uses: actions/upload-artifact@v2
        with:
          name: docker_images
          path: |
            fms_testbuild.tar.gz
            osm_brsu.tar.gz

  docs:
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: "3.6"

      - name: install dependencies
        run: |
          sudo apt-get -y install make gcc
          pip install sphinx sphinx_rtd_theme

      - name: make docs
        run: |
          cd docs
          make html

      - name: store docs
        uses: actions/upload-artifact@v2
        with:
          name: html
          path: docs

  pylint:
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: "3.6"

      - name: install dependencies
        run: |
          pip install pylint
          pip install anybadge

      - name: run pylint
        run: python3 .travis/lint.py

      - name: store pylint resuts
        uses: actions/upload-artifact@v2
        with:
          name: pylint.svg
          path: fleet_management

  coverage:
    needs: build

    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: download fms image
        uses: actions/download-artifact@v2
        with:
          name: docker_images
          path: fms_testbuild.tar.gz

      - name: load fms image
        run: docker load -i fms_testbuild.tar.gz

      - name: run coverage test
        run: docker run $CONTAINER_TEST_IMAGE pytest --collect-only --cov=fleet_management test/fms

  resource_management_test:
    needs: build

    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2

      - name: download fms image
        uses: actions/download-artifact@v2
        with:
          name: docker_images
          path: fms_testbuild.tar.gz

      - name: load fms image
        run: docker load -i fms_testbuild.tar.gz

      - name: run resource_management test
        run: |
          docker run $CONTAINER_TEST_IMAGE pytest test/fms/resources/fleet
          docker run $CONTAINER_TEST_IMAGE pytest test/fms/resources/infrastructure
  # # Push image to GitHub Packages.
  # # See also https://docs.docker.com/docker-hub/builds/
  # push:
  #   # Ensure test job passes before pushing image.
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build image
  #       run: docker build . --file Dockerfile --tag $IMAGE_NAME
  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
  #     - name: Push image
  #       run: |
  #         IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "master" ] && VERSION=latest
  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION
  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
